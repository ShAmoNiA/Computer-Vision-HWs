# -*- coding: utf-8 -*-
"""HW2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-oL-aoo9dPs4MtQiCXr-eeZ3uXJX7Vsh
"""


import numpy as np
import cv2 as cv
import glob,os

"""## 1."""

full_path = "F:/university/Machine vision/hw2/HW[2]/"
img1 = cv.imread(full_path+'/img1.png')
img1_g = cv.cvtColor(img1, cv.COLOR_BGR2GRAY)


"""به دلیل اینکه در عمل، هیچ لنز ساخته شده ای ایده آل نیست، تصاویر ثبت شده توسط دوربین ها دارای اعوجاج هستند
این اعوجاج به دو نوع اصلی، برحسب دلایل تشکیل آن ها، تقسیم می شوند



*    اعوجاج شعاعی که حاصل از شکل لنز است
*   اعوجاج مماسی که حاصل از فرآیند سوار کردن دوربین است

## 2.
"""

criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 30, 0.001)

realp = np.zeros((17*24,3), np.float32)
realp[:,:2] = np.mgrid[0:24,0:17].T.reshape(-1,2)

realpoints = [] 
imgpoints = [] 

ret, corners = cv.findChessboardCorners(img1_g, (24,17), None)

"""## 3."""

if ret == True:
    realpoints.append(realp)
    corners2 = cv.cornerSubPix(img1_g,corners, (11,11), (-1,-1), criteria)
    imgpoints.append(corners2)
    cv.drawChessboardCorners(img1, (25,18), corners2, ret)
    cv.imshow('image',img1)
    cv.waitKey(500)

"""## 4."""

ret, matrix, coefficients, rotation, translation = cv.calibrateCamera(realpoints, imgpoints, img1_g.shape[::-1], None, None)

"""## 5."""

print('k1: '+str(coefficients[0][0]))
print('k2: '+str(coefficients[0][1]))
print('p1: '+str(coefficients[0][2]))
print('p1: '+str(coefficients[0][3]))
print('k3: '+str(coefficients[0][4]))

"""## 6."""

img5 = cv.imread(full_path+'img5.png')
h,  w = img5.shape[:2]
newcameramtx, roi = cv.getOptimalNewCameraMatrix(matrix, coefficients, (w,h), 1, (w,h))
dst = cv.undistort(img5, matrix, coefficients, None, newcameramtx)

x, y, w, h = roi
img5 = dst[y:y+h, x:x+w]
cv.imshow('image',img5)
cv.waitKey(5000)

"""## 7."""

criteria = (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 30, 0.001)
realp = np.zeros((17*24,3), np.float32)
realp[:,:2] = np.mgrid[0:24,0:17].T.reshape(-1,2)

realpoints = [] 
imgpoints = [] 
images = ['img1.png','img2.png','img3.png','img4.png']

for fname in images:
    img = cv.imread(full_path+fname)
    img_g = cv.cvtColor(img, cv.COLOR_BGR2GRAY)
  
    ret, corners = cv.findChessboardCorners(img_g, (24,17), None)
    
    if ret == True:
        realpoints.append(realp)
        corners2 = cv.cornerSubPix(img_g,corners, (11,11), (-1,-1), criteria)
        imgpoints.append(corners)
     
ret, matrix, coefficients, rotation, translation = cv.calibrateCamera(realpoints, imgpoints, img_g.shape[::-1], None, None)

img5 = cv.imread(full_path+'img5.png')
h,  w = img5.shape[:2]
newcameramtx, roi = cv.getOptimalNewCameraMatrix(matrix, coefficients, (w,h), 1, (w,h))
dst = cv.undistort(img5, matrix, coefficients, None, newcameramtx)

x, y, w, h = roi
img5 = dst[y:y+h, x:x+w]
cv.imshow('image',img5)
cv.waitKey(5000)